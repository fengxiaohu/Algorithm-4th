import edu.princeton.cs.algs4.*;
import edu.princeton.cs.algs4.In;

public class KruskalMST {
    private static final double FLOATING_POINT_EPSILON = 1E-12;
    private double weight; // weight of mst
    private Queue<Edge> mst = new Queue<Edge>();
    private MinPQ<Edge> pq;

    public KruskalMST(EdgeWeightedGraph G)
    {
        MinPQ<Edge> pq = new MinPQ<>();
        for(Edge e:G.edges())
        {
            pq.insert(e);
        }
        UF uf = new UF(G.V());

        while(!pq.isEmpty()&&(mst.size()<G.V()-1))
        // 每次将最小的边加入 mst
        {
            Edge e = pq.delMin();
            int v=e.either();
            int w=e.other(v);
            if(uf.find(v)!=uf.find(w))// v-w is acylic
            {
                uf.union(v, w);// initilize the Union 
                mst.enqueue(e);
                weight+=e.weight();         
            }
        }
        //assert check(G);
        
    }
    public Iterable<Edge> edges()
    {
        return mst;
    }
    public double weight()
    {
        return weight;
    }
    private boolean check(EdgeWeightedGraph G)
    {
        double total_weight = 0.0;
        // check weight
        for(Edge e : G.edges())
        {
            total_weight += e.weight();
            if(Math.abs(total_weight-this.weight)>FLOATING_POINT_EPSILON);
            
        }
         // check that it is self-cycle
        UF uf = new UF(G.V());
        for(Edge e:edges())
        {

            int v=e.either();
            int w = e.other(v);
            if(uf.find(v) != uf.find(w))
            {
                System.err.println("Not a spanning forest");
                return false;
            }
        }
        for(Edge e:edges())
        {
            int v=e.either();
            int w = e.other(v);
            if (uf.find(v) != uf.find(w)) {
                System.err.println("Not a spanning forest");
                return false;
            }
            
        }
        for(Edge e:edges())
        {
            uf = new UF(G.V());
            // all edges in mst except in e
            for(Edge f:mst)
            {
                int x = f.either();
                int y = f.other(x);
                if(f!=e) uf.union(x, y); 
            }
            // check that e is min weight edge in crossing cut
            for(Edge f:G.edges())
            {
                int x = f.either();
                int y = f.other(x);
                if(uf.find(x)!=uf.find(y))
                {
                    if(f.weight()<e.weight())
                    {
                        System.err.println("Edge " + f + " violates cut optimality conditions");
                        return false;
                    }
                }
            }
        }
        return true;
    }
    public static void main(String[] args)
    {
        In in = new In(args[0]);
        EdgeWeightedGraph G = new EdgeWeightedGraph(in);
        KruskalMST mst = new KruskalMST(G);
        for(Edge e:mst.edges())
        {
            StdOut.println(e);
        }
        StdOut.printf("%.5f\n", mst.weight());

    }
    
}
